generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Attributes {
  id            Int             @id @default(autoincrement())
  name          String
  createdAt     DateTime        @default(now()) @db.DateTime(0)
  updatedAt     DateTime        @default(now()) @db.DateTime(0)
  deletedAt     DateTime?       @db.DateTime(0)
  LoanAttribute LoanAttribute[]
}

model Comments {
  id        Int       @id @default(autoincrement())
  loanId    Int
  userId    Int
  comment   String?   @db.Text
  createdAt DateTime  @default(now()) @db.DateTime(0)
  updatedAt DateTime  @default(now()) @db.DateTime(0)
  deletedAt DateTime? @db.DateTime(0)
  Loan      Loan      @relation(fields: [loanId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Comments_1")
  User      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_comments_2")

  @@index([loanId], map: "fk_comments_1_idx")
  @@index([userId], map: "fk_comments_2_idx")
}

model ContactLabel {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  description   String?
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now()) @db.DateTime(0)
  updatedAt     DateTime        @default(now()) @db.DateTime(0)
  deletedAt     DateTime?       @db.DateTime(0)
  DebtorContact DebtorContact[]

  @@index([deletedAt])
  @@index([isActive])
  @@index([name])
}

model ContactType {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  description   String?
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now()) @db.DateTime(0)
  updatedAt     DateTime        @default(now()) @db.DateTime(0)
  deletedAt     DateTime?       @db.DateTime(0)
  DebtorContact DebtorContact[]

  @@index([deletedAt])
  @@index([isActive])
  @@index([name])
}

model Debtor {
  id                  Int                   @id @default(autoincrement())
  publicId            String                @default(dbgenerated("(uuid())")) @db.Char(36)
  firstName           String
  lastName            String
  birthdate           DateTime?             @db.Date
  mainEmail           String?
  mainPhone           String?
  mainAddress         String?
  statusId            Int
  createdAt           DateTime              @default(now()) @db.DateTime(0)
  updatedAt           DateTime              @default(now()) @db.DateTime(0)
  deletedAt           DateTime?             @db.DateTime(0)
  idNumber            String?               @db.VarChar(45)
  DebtorStatus        DebtorStatus          @relation(fields: [statusId], references: [id])
  DebtorContact       DebtorContact[]
  DebtorStatusHistory DebtorStatusHistory[]
  Loan                Loan[]

  @@index([createdAt])
  @@index([deletedAt])
  @@index([firstName, lastName])
  @@index([mainEmail])
  @@index([mainPhone])
  @@index([statusId])
}

model DebtorContact {
  id           Int           @id @default(autoincrement())
  debtorId     Int
  typeId       Int
  value        String
  labelId      Int?
  isPrimary    Boolean       @default(false)
  userId       Int?
  notes        String?
  createdAt    DateTime      @default(now()) @db.DateTime(0)
  updatedAt    DateTime      @default(now()) @db.DateTime(0)
  deletedAt    DateTime?     @db.DateTime(0)
  Debtor       Debtor        @relation(fields: [debtorId], references: [id], onDelete: Cascade)
  ContactLabel ContactLabel? @relation(fields: [labelId], references: [id])
  ContactType  ContactType   @relation(fields: [typeId], references: [id])
  User         User?         @relation(fields: [userId], references: [id])
  SmsHistory   SmsHistory[]

  @@index([debtorId])
  @@index([deletedAt])
  @@index([isPrimary])
  @@index([labelId])
  @@index([typeId])
  @@index([userId], map: "DebtorContact_userId_fkey")
}

model DebtorStatus {
  id                 Int                   @id @default(autoincrement())
  name               String                @unique
  description        String?
  isActive           Boolean               @default(true)
  createdAt          DateTime              @default(now()) @db.DateTime(0)
  updatedAt          DateTime              @default(now()) @db.DateTime(0)
  deletedAt          DateTime?             @db.DateTime(0)
  Debtor             Debtor[]
  newStatusHistories DebtorStatusHistory[] @relation("NewStatusRelation")
  oldStatusHistories DebtorStatusHistory[] @relation("OldStatusRelation")

  @@index([deletedAt])
  @@index([isActive])
  @@index([name])
}

model DebtorStatusHistory {
  id          Int           @id @default(autoincrement())
  debtorId    Int
  oldStatusId Int?
  newStatusId Int
  changedBy   Int
  notes       String?
  createdAt   DateTime      @default(now()) @db.DateTime(0)
  updatedAt   DateTime      @default(now()) @db.DateTime(0)
  deletedAt   DateTime?     @db.DateTime(0)
  User        User          @relation(fields: [changedBy], references: [id])
  Debtor      Debtor        @relation(fields: [debtorId], references: [id], onDelete: Cascade)
  newStatus   DebtorStatus  @relation("NewStatusRelation", fields: [newStatusId], references: [id])
  oldStatus   DebtorStatus? @relation("OldStatusRelation", fields: [oldStatusId], references: [id])

  @@index([changedBy])
  @@index([debtorId])
  @@index([deletedAt])
  @@index([newStatusId], map: "DebtorStatusHistory_newStatusId_fkey")
  @@index([oldStatusId], map: "DebtorStatusHistory_oldStatusId_fkey")
}

model Loan {
  id                    Int                     @id @default(autoincrement())
  publicId              String                  @unique(map: "publicId_UNIQUE") @default(dbgenerated("(uuid())")) @db.Char(36)
  portfolioId           Int
  debtorId              Int
  caseId                Int?
  principal             Decimal                 @db.Decimal(12, 2)
  interest              Decimal?                @default(0.00) @db.Decimal(12, 2)
  penalty               Decimal?                @default(0.00) @db.Decimal(12, 2)
  otherFee              Decimal?                @default(0.00) @db.Decimal(12, 2)
  legalCharges          Decimal?                @default(0.00) @db.Decimal(12, 2)
  totalDebt             Decimal?                @default(0.00) @db.Decimal(12, 2)
  purchasedAmount       Decimal                 @db.Decimal(12, 2)
  loanStartDate         DateTime                @db.Date
  loanDueDate           DateTime                @db.Date
  statusId              Int
  createdAt             DateTime                @default(now()) @db.DateTime(0)
  updatedAt             DateTime                @default(now()) @db.DateTime(0)
  deletedAt             DateTime?               @db.DateTime(0)
  currency              String?                 @db.VarChar(45)
  Comments              Comments[]
  Committee             Committee[]
  Debtor                Debtor                  @relation(fields: [debtorId], references: [id], onDelete: Cascade)
  Portfolio             Portfolio               @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  LoanStatus            LoanStatus              @relation(fields: [statusId], references: [id])
  LoanAssignment        LoanAssignment[]
  LoanAssignmentHistory LoanAssignmentHistory[]
  LoanAttribute         LoanAttribute[]
  LoanCollateralStatus  LoanCollateralStatus[]
  LoanLegalStage        LoanLegalStage[]
  LoanLitigationStage   LoanLitigationStage[]
  LoanMarks             LoanMarks[]
  LoanRemaining         LoanRemaining[]
  LoanStatusHistory     LoanStatusHistory[]
  PaymentCommitment     PaymentCommitment[]
  SmsHistory            SmsHistory[]
  Tasks                 Tasks[]
  Transaction           Transaction[]

  @@index([createdAt])
  @@index([debtorId])
  @@index([deletedAt])
  @@index([loanDueDate])
  @@index([portfolioId])
  @@index([statusId])
}

model LoanAttribute {
  id          Int        @id @default(autoincrement())
  loanId      Int
  attributeId Int
  value       String?
  createdAt   DateTime   @default(now()) @db.DateTime(0)
  updatedAt   DateTime   @default(now()) @db.DateTime(0)
  deletedAt   DateTime?  @db.DateTime(0)
  Attributes  Attributes @relation(fields: [attributeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Loan        Loan       @relation(fields: [loanId], references: [id])

  @@index([attributeId], map: "fk_LoanAttribute_1_idx")
  @@index([loanId], map: "fk_LoanAttribute_2_idx")
}

model LoanStatus {
  id               Int                 @id @default(autoincrement())
  name             String              @unique
  description      String?
  isActive         Boolean             @default(true)
  createdAt        DateTime            @default(now()) @db.DateTime(0)
  updatedAt        DateTime            @default(now()) @db.DateTime(0)
  deletedAt        DateTime?           @db.DateTime(0)
  Loan             Loan[]
  newStatusHistory LoanStatusHistory[] @relation("NewLoanStatusRelation")
  oldStatusHistory LoanStatusHistory[] @relation("OldLoanStatusRelation")

  @@index([deletedAt])
  @@index([isActive])
  @@index([name])
}

model LoanStatusHistory {
  id                  Int         @id @default(autoincrement())
  loanId              Int
  oldStatusId         Int?
  newStatusId         Int
  changedBy           Int
  notes               String?
  createdAt           DateTime    @default(now()) @db.DateTime(0)
  updatedAt           DateTime    @default(now()) @db.DateTime(0)
  deletedAt           DateTime?   @db.DateTime(0)
  User                User        @relation(fields: [changedBy], references: [id])
  Loan                Loan        @relation(fields: [loanId], references: [id], onDelete: Cascade)
  LoanStatusNewStatus LoanStatus  @relation("NewLoanStatusRelation", fields: [newStatusId], references: [id])
  LoanStatusOldStatus LoanStatus? @relation("OldLoanStatusRelation", fields: [oldStatusId], references: [id])

  @@index([changedBy])
  @@index([deletedAt])
  @@index([loanId])
  @@index([newStatusId], map: "LoanStatusHistory_newStatusId_fkey")
  @@index([oldStatusId], map: "LoanStatusHistory_oldStatusId_fkey")
}

model PaymentCommitment {
  id              Int                    @id @default(autoincrement())
  loanId          Int
  paymentDate     DateTime               @db.Date
  amount          Decimal                @db.Decimal(12, 2)
  comment         String?                @db.Text
  type            PaymentCommitment_type
  userId          Int
  isActive        Int                    @default(1) @db.TinyInt
  createdAt       DateTime               @default(now()) @db.DateTime(0)
  updatedAt       DateTime               @default(now()) @db.DateTime(0)
  deletedAt       DateTime?              @db.DateTime(0)
  Loan            Loan                   @relation(fields: [loanId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_PaymentCommitment_1")
  User            User                   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_PaymentCommitment_2")
  PaymentSchedule PaymentSchedule[]

  @@index([loanId], map: "fk_PaymentCommitment_1_idx")
  @@index([userId], map: "fk_PaymentCommitment_2_idx")
}

model PaymentSchedule {
  id                Int               @id @default(autoincrement())
  commitmentId      Int
  paymentDate       DateTime          @db.Date
  amount            Decimal           @db.Decimal(12, 2)
  createdAt         DateTime          @default(now()) @db.DateTime(0)
  updatedAt         DateTime          @default(now()) @db.DateTime(0)
  deletedAt         DateTime?         @db.DateTime(0)
  PaymentCommitment PaymentCommitment @relation(fields: [commitmentId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_PaymentSchedule_1")

  @@index([commitmentId], map: "fk_PaymentSchedule_1_idx")
}

model Portfolio {
  id            Int       @id @default(autoincrement())
  name          String
  purchasePrice Decimal   @db.Decimal(12, 2)
  purchaseDate  DateTime  @db.Date
  bankName      String
  notes         String?
  createdAt     DateTime  @default(now()) @db.DateTime(0)
  updatedAt     DateTime  @default(now()) @db.DateTime(0)
  deletedAt     DateTime? @db.DateTime(0)
  Loan          Loan[]

  @@index([deletedAt])
  @@index([name])
  @@index([purchaseDate])
}

model Role {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @unique
  createdAt             DateTime                @default(now()) @db.DateTime(0)
  updatedAt             DateTime                @default(now()) @db.DateTime(0)
  deletedAt             DateTime?               @db.DateTime(0)
  LoanAssignment        LoanAssignment[]
  LoanAssignmentHistory LoanAssignmentHistory[]
  User                  User[]

  @@index([deletedAt])
  @@index([name])
}

model Transaction {
  id                          Int                         @id @default(autoincrement())
  publicId                    String                      @unique(map: "publicId_UNIQUE") @default(dbgenerated("(uuid())")) @db.Char(36)
  loanId                      Int?
  amount                      Decimal?                    @db.Decimal(12, 2)
  userId                      Int?
  paymentDate                 DateTime?                   @db.Date
  principal                   Decimal?                    @db.Decimal(12, 2)
  interest                    Decimal?                    @db.Decimal(12, 2)
  penalty                     Decimal?                    @db.Decimal(12, 2)
  fees                        Decimal?                    @db.Decimal(12, 2)
  legal                       Decimal?                    @db.Decimal(12, 2)
  transactionChannelAccountId Int?
  currency                    String?                     @default("GEL") @db.VarChar(45)
  createdAt                   DateTime?                   @default(now()) @db.DateTime(0)
  deleted                     Int?                        @default(0) @db.TinyInt
  Loan                        Loan?                       @relation(fields: [loanId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Transactions_1")
  User                        User?                       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Transactions_2")
  TransactionChannelAccounts  TransactionChannelAccounts? @relation(fields: [transactionChannelAccountId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Transactions_3")
  TransactionDeleted          TransactionDeleted[]

  @@index([loanId], map: "fk_Transactions_1_idx")
  @@index([userId], map: "fk_Transactions_2_idx")
  @@index([transactionChannelAccountId], map: "fk_Transactions_3_idx")
}

model TransactionChannelAccounts {
  id                   Int                  @id @default(autoincrement())
  transactionChannelId Int?
  name                 String?              @db.VarChar(100)
  active               Int?                 @default(1) @db.TinyInt
  createdAt            DateTime?            @default(now()) @db.DateTime(0)
  updatedAt            DateTime?            @default(now()) @db.DateTime(0)
  Transaction          Transaction[]
  TransactionChannels  TransactionChannels? @relation(fields: [transactionChannelId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_TransactionChannelAccounts_1")

  @@index([transactionChannelId], map: "fk_TransactionChannelAccounts_1_idx")
}

model TransactionChannels {
  id                         Int                          @id @default(autoincrement())
  name                       String                       @db.VarChar(255)
  active                     Int?                         @default(1) @db.TinyInt
  createdAt                  DateTime?                    @default(now()) @db.DateTime(0)
  updatedAt                  DateTime?                    @default(now()) @db.DateTime(0)
  TransactionChannelAccounts TransactionChannelAccounts[]
}

model TransactionDeleted {
  id            Int          @id @default(autoincrement())
  transactionId Int?
  userId        Int?
  deletedAt     DateTime?    @default(now()) @db.DateTime(0)
  Transaction   Transaction? @relation(fields: [transactionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_TransactionDeleted_1")
  User          User?        @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_TransactionDeleted_2")

  @@index([transactionId], map: "fk_TransactionDeleted_1_idx")
  @@index([userId], map: "fk_TransactionDeleted_2_idx")
}

model User {
  id                                                          Int                     @id @default(autoincrement())
  publicId                                                    String                  @unique(map: "publicId_UNIQUE") @default(dbgenerated("(uuid())")) @db.Char(36)
  accountId                                                   String                  @unique
  email                                                       String                  @unique
  firstName                                                   String
  lastName                                                    String
  hash                                                        String
  roleId                                                      Int
  mustChangePassword                                          Boolean                 @default(true)
  createdAt                                                   DateTime                @default(now()) @db.DateTime(0)
  updatedAt                                                   DateTime                @default(now()) @db.DateTime(0)
  deletedAt                                                   DateTime?               @db.DateTime(0)
  Comments                                                    Comments[]
  Committee_Committee_requesterIdToUser                       Committee[]             @relation("Committee_requesterIdToUser")
  Committee_Committee_responderIdToUser                       Committee[]             @relation("Committee_responderIdToUser")
  DebtorContact                                               DebtorContact[]
  DebtorStatusHistory                                         DebtorStatusHistory[]
  LoanAssignment                                              LoanAssignment[]
  LoanAssignmentHistory_LoanAssignmentHistory_userIdToUser    LoanAssignmentHistory[] @relation("LoanAssignmentHistory_userIdToUser")
  LoanAssignmentHistory_LoanAssignmentHistory_createdByToUser LoanAssignmentHistory[] @relation("LoanAssignmentHistory_createdByToUser")
  LoanCollateralStatus                                        LoanCollateralStatus[]
  LoanLegalStage                                              LoanLegalStage[]
  LoanLitigationStage                                         LoanLitigationStage[]
  LoanStatusHistory                                           LoanStatusHistory[]
  PaymentCommitment                                           PaymentCommitment[]
  Tasks_Tasks_fromUserToUser                                  Tasks[]                 @relation("Tasks_fromUserToUser")
  Tasks_Tasks_toUserIdToUser                                  Tasks[]                 @relation("Tasks_toUserIdToUser")
  Transaction                                                 Transaction[]
  TransactionDeleted                                          TransactionDeleted[]
  Role                                                        Role                    @relation(fields: [roleId], references: [id])

  @@index([accountId])
  @@index([deletedAt])
  @@index([email])
  @@index([roleId], map: "User_roleId_fkey")
}

model portfolioSeller {
  id        Int       @id @default(autoincrement())
  name      String?   @db.VarChar(45)
  active    String?   @default("1") @db.VarChar(45)
  createdAt DateTime  @default(now()) @db.DateTime(0)
  updatedAt DateTime  @default(now()) @db.DateTime(0)
  deletedAt DateTime? @db.DateTime(0)
}

model Tasks {
  id                        Int          @id @default(autoincrement())
  loanId                    Int?
  task                      String?      @db.VarChar(255)
  response                  String?      @db.VarChar(255)
  fromUser                  Int
  toUserId                  Int
  deadline                  DateTime     @db.Date
  status                    Tasks_status @default(pending)
  createdAt                 DateTime     @default(now()) @db.DateTime(0)
  updatedAt                 DateTime     @default(now()) @db.DateTime(0)
  deletedAt                 DateTime?    @db.DateTime(0)
  Loan                      Loan?        @relation(fields: [loanId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Tasks_1")
  User_Tasks_fromUserToUser User         @relation("Tasks_fromUserToUser", fields: [fromUser], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Tasks_2")
  User_Tasks_toUserIdToUser User         @relation("Tasks_toUserIdToUser", fields: [toUserId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Tasks_3")

  @@index([loanId], map: "fk_Tasks_1_idx")
  @@index([fromUser], map: "fk_Tasks_2")
  @@index([toUserId], map: "fk_Tasks_3")
}

model SmsHistory {
  id            Int               @id @default(autoincrement())
  loanId        Int
  contactId     Int
  phone         String            @db.VarChar(45)
  message       String            @db.VarChar(500)
  status        SmsHistory_status
  createdAt     DateTime          @default(now()) @db.DateTime(0)
  updatedAt     DateTime          @default(now()) @db.DateTime(0)
  deletedAt     DateTime?         @db.DateTime(0)
  balance       Int?
  errorCode     Int?
  messageId     Int?
  smsJson       String?           @db.VarChar(500)
  Loan          Loan              @relation(fields: [loanId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_SmsHistory_1")
  DebtorContact DebtorContact     @relation(fields: [contactId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_SmsHistory_2")

  @@index([loanId], map: "fk_SmsHistory_1")
  @@index([contactId], map: "fk_SmsHistory_2")
}

model LoanAssignment {
  id           Int       @id @default(autoincrement())
  loanId       Int
  userId       Int
  roleId       Int
  assignedAt   DateTime  @default(now()) @db.DateTime(0)
  unassignedAt DateTime? @db.DateTime(0)
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now()) @db.DateTime(0)
  updatedAt    DateTime  @default(now()) @db.DateTime(0)
  deletedAt    DateTime? @db.DateTime(0)
  Loan         Loan      @relation(fields: [loanId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_LoanAssignment_1")
  User         User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_LoanAssignment_2")
  Role         Role      @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_LoanAssignment_3")

  @@index([loanId], map: "fk_LoanAssignment_1")
  @@index([userId], map: "fk_LoanAssignment_2")
  @@index([roleId], map: "fk_LoanAssignment_3")
}

model LoanAssignmentHistory {
  id                                         Int                          @id @default(autoincrement())
  loanId                                     Int
  userId                                     Int
  roleId                                     Int
  action                                     LoanAssignmentHistory_action
  actionDate                                 DateTime                     @default(now()) @db.DateTime(0)
  createdBy                                  Int
  deletedAt                                  DateTime?                    @db.DateTime(0)
  Loan                                       Loan                         @relation(fields: [loanId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_LoanAssignmentHistory_1")
  User_LoanAssignmentHistory_userIdToUser    User                         @relation("LoanAssignmentHistory_userIdToUser", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_LoanAssignmentHistory_2")
  Role                                       Role                         @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_LoanAssignmentHistory_3")
  User_LoanAssignmentHistory_createdByToUser User                         @relation("LoanAssignmentHistory_createdByToUser", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_LoanAssignmentHistory_4")

  @@index([loanId], map: "fk_LoanAssignmentHistory_1")
  @@index([userId], map: "fk_LoanAssignmentHistory_2")
  @@index([roleId], map: "fk_LoanAssignmentHistory_3")
  @@index([createdBy], map: "fk_LoanAssignmentHistory_4")
}

model Committee {
  id                               Int              @id @default(autoincrement())
  loanId                           Int
  requesterId                      Int
  responderId                      Int?
  principalAmount                  Decimal          @db.Decimal(12, 2)
  requestText                      String           @db.VarChar(500)
  requestDate                      DateTime         @default(now()) @db.DateTime(0)
  responseText                     String?          @db.VarChar(500)
  responseDate                     DateTime?        @db.DateTime(0)
  agreementMinAmount               Decimal?         @db.Decimal(12, 2)
  attachmentPath                   String?          @db.VarChar(255)
  type                             Committee_type   @default(none)
  status                           Committee_status @default(pending)
  createdAt                        DateTime         @default(now()) @db.DateTime(0)
  updatedAt                        DateTime         @default(now()) @db.DateTime(0)
  deletedAt                        DateTime?        @db.DateTime(0)
  Loan                             Loan             @relation(fields: [loanId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_committee_1")
  User_Committee_requesterIdToUser User             @relation("Committee_requesterIdToUser", fields: [requesterId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_committee_2")
  User_Committee_responderIdToUser User?            @relation("Committee_responderIdToUser", fields: [responderId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_committee_3")

  @@index([loanId], map: "idx_committee_1")
  @@index([requesterId], map: "idx_committee_2")
  @@index([responderId], map: "idx_committee_3")
}

model Marks {
  id        Int         @id @default(autoincrement())
  title     String      @db.VarChar(500)
  createdAt DateTime    @default(now()) @db.DateTime(0)
  updatedAt DateTime    @default(now()) @db.DateTime(0)
  deletedAt DateTime?   @db.DateTime(0)
  LoanMarks LoanMarks[]

  @@index([deletedAt], map: "idx_deletedAt")
}

model LoanMarks {
  id        Int       @id @default(autoincrement())
  loanId    Int
  markId    Int
  comment   String?   @db.VarChar(500)
  deadline  DateTime? @db.DateTime(0)
  createdAt DateTime  @default(now()) @db.DateTime(0)
  updatedAt DateTime  @default(now()) @db.DateTime(0)
  deletedAt DateTime? @db.DateTime(0)
  Loan      Loan      @relation(fields: [loanId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_LoanMarks_1")
  Marks     Marks     @relation(fields: [markId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_LoanMarks_2")

  @@index([loanId], map: "idx_LoanMarks_1")
  @@index([markId], map: "idx_LoanMarks_2")
  @@index([deletedAt], map: "idx_deletedAt")
}

model LegalStage {
  id             Int              @id @default(autoincrement())
  title          String           @db.VarChar(500)
  createdAt      DateTime         @default(now()) @db.DateTime(0)
  updatedAt      DateTime         @default(now()) @db.DateTime(0)
  deletedAt      DateTime?        @db.DateTime(0)
  LoanLegalStage LoanLegalStage[]

  @@index([deletedAt], map: "idx_deletedAt")
}

model LoanLegalStage {
  id           Int        @id @default(autoincrement())
  loanId       Int
  legalStageId Int
  comment      String?    @db.VarChar(500)
  userId       Int
  createdAt    DateTime   @default(now()) @db.DateTime(0)
  updatedAt    DateTime   @default(now()) @db.DateTime(0)
  deletedAt    DateTime?  @db.DateTime(0)
  Loan         Loan       @relation(fields: [loanId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_LoanLegalStage_1")
  LegalStage   LegalStage @relation(fields: [legalStageId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_LoanLegalStage_2")
  User         User       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_LoanLegalStage_3")

  @@index([loanId], map: "idx_LoanLegalStage_1")
  @@index([legalStageId], map: "idx_LoanLegalStage_2")
  @@index([userId], map: "idx_LoanLegalStage_3")
  @@index([deletedAt], map: "idx_deletedAt")
}

model CollateralStatus {
  id                   Int                    @id @default(autoincrement())
  title                String                 @db.VarChar(500)
  createdAt            DateTime               @default(now()) @db.DateTime(0)
  updatedAt            DateTime               @default(now()) @db.DateTime(0)
  deletedAt            DateTime?              @db.DateTime(0)
  LoanCollateralStatus LoanCollateralStatus[]

  @@index([deletedAt], map: "idx_deletedAt")
}

model LoanCollateralStatus {
  id                 Int              @id @default(autoincrement())
  loanId             Int
  collateralStatusId Int
  comment            String?          @db.VarChar(500)
  userId             Int
  createdAt          DateTime         @default(now()) @db.DateTime(0)
  updatedAt          DateTime         @default(now()) @db.DateTime(0)
  deletedAt          DateTime?        @db.DateTime(0)
  Loan               Loan             @relation(fields: [loanId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_LoanCollateralStatus_1")
  CollateralStatus   CollateralStatus @relation(fields: [collateralStatusId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_LoanCollateralStatus_2")
  User               User             @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_LoanCollateralStatus_3")

  @@index([loanId], map: "idx_LoanCollateralStatus_1")
  @@index([collateralStatusId], map: "idx_LoanCollateralStatus_2")
  @@index([userId], map: "idx_LoanCollateralStatus_3")
  @@index([deletedAt], map: "idx_deletedAt")
}

model LitigationStage {
  id                  Int                   @id @default(autoincrement())
  title               String                @db.VarChar(500)
  createdAt           DateTime              @default(now()) @db.DateTime(0)
  updatedAt           DateTime              @default(now()) @db.DateTime(0)
  deletedAt           DateTime?             @db.DateTime(0)
  LoanLitigationStage LoanLitigationStage[]

  @@index([deletedAt], map: "idx_deletedAt")
}

model LoanLitigationStage {
  id                Int             @id @default(autoincrement())
  loanId            Int
  litigationStageId Int
  comment           String?         @db.VarChar(500)
  userId            Int
  createdAt         DateTime        @default(now()) @db.DateTime(0)
  updatedAt         DateTime        @default(now()) @db.DateTime(0)
  deletedAt         DateTime?       @db.DateTime(0)
  Loan              Loan            @relation(fields: [loanId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_LoanLitigationStage_1")
  LitigationStage   LitigationStage @relation(fields: [litigationStageId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_LoanLitigationStage_2")
  User              User            @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_LoanLitigationStage_3")

  @@index([loanId], map: "idx_LoanLitigationStage_1")
  @@index([litigationStageId], map: "idx_LoanLitigationStage_2")
  @@index([userId], map: "idx_LoanLitigationStage_3")
  @@index([deletedAt], map: "idx_deletedAt")
}

model Templates {
  id          Int            @id @default(autoincrement())
  title       String         @db.VarChar(50)
  filePath    String         @db.VarChar(50)
  description String?        @db.VarChar(500)
  isActive    Boolean        @default(true)
  type        Templates_type @default(court)
  createdAt   DateTime       @default(now()) @db.DateTime(0)
  updatedAt   DateTime       @default(now()) @db.DateTime(0)
  deletedAt   DateTime?      @db.DateTime(0)

  @@index([deletedAt], map: "idx_deletedAt")
}

model LoanRemaining {
  id           Int       @id @default(autoincrement())
  loanId       Int?
  principal    Decimal?  @db.Decimal(12, 2)
  interest     Decimal?  @db.Decimal(12, 2)
  penalty      Decimal?  @db.Decimal(12, 2)
  otherFee     Decimal?  @db.Decimal(12, 2)
  legalCharges Decimal?  @db.Decimal(12, 2)
  currentDebt  Decimal?  @db.Decimal(12, 2)
  agreementMin Decimal?  @db.Decimal(12, 2)
  createdAt    DateTime  @default(now()) @db.DateTime(0)
  updatedAt    DateTime  @default(now()) @db.DateTime(0)
  deletedAt    DateTime? @db.DateTime(0)
  Loan         Loan?     @relation(fields: [loanId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_LoanRemaining_1")

  @@index([loanId], map: "fk_LoanRemaining_1")
  @@index([deletedAt], map: "idx_deletedAt")
}

enum PaymentCommitment_type {
  agreement
  promise
}

enum Tasks_status {
  pending
  complete
}

enum SmsHistory_status {
  success
  failed
}

enum LoanAssignmentHistory_action {
  assigned
  reassigned
  unassigned
}

enum Committee_type {
  none
  close
  correction
  discount
  hopeless
}

enum Committee_status {
  pending
  complete
}

enum Templates_type {
  court
  email
}
