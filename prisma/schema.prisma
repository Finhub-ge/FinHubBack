generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Attributes {
  id            Int             @id @default(autoincrement())
  name          String
  createdAt     DateTime        @default(now()) @db.DateTime(0)
  updatedAt     DateTime        @default(now()) @db.DateTime(0)
  deletedAt     DateTime?       @db.DateTime(0)
  LoanAttribute LoanAttribute[]
}

model Comments {
  id        Int       @id @default(autoincrement())
  loanId    Int
  userId    Int
  comment   String?   @db.Text
  createdAt DateTime  @default(now()) @db.DateTime(0)
  updatedAt DateTime  @default(now()) @db.DateTime(0)
  deletedAt DateTime? @db.DateTime(0)
  Loan      Loan      @relation(fields: [loanId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Comments_1")
  User      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_comments_2")

  @@index([loanId], map: "fk_comments_1_idx")
  @@index([userId], map: "fk_comments_2_idx")
}

model ContactLabel {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  description   String?
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now()) @db.DateTime(0)
  updatedAt     DateTime        @default(now()) @db.DateTime(0)
  deletedAt     DateTime?       @db.DateTime(0)
  DebtorContact DebtorContact[]

  @@index([deletedAt])
  @@index([isActive])
  @@index([name])
}

model ContactType {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  description   String?
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now()) @db.DateTime(0)
  updatedAt     DateTime        @default(now()) @db.DateTime(0)
  deletedAt     DateTime?       @db.DateTime(0)
  DebtorContact DebtorContact[]

  @@index([deletedAt])
  @@index([isActive])
  @@index([name])
}

model Debtor {
  id                  Int                   @id @default(autoincrement())
  publicId            String                @default(dbgenerated("(uuid())")) @db.Char(36)
  firstName           String
  lastName            String
  birthdate           DateTime?             @db.Date
  mainEmail           String?
  mainPhone           String?
  mainAddress         String?
  statusId            Int
  createdAt           DateTime              @default(now()) @db.DateTime(0)
  updatedAt           DateTime              @default(now()) @db.DateTime(0)
  deletedAt           DateTime?             @db.DateTime(0)
  idNumber            String?               @db.VarChar(45)
  DebtorStatus        DebtorStatus          @relation(fields: [statusId], references: [id])
  DebtorContact       DebtorContact[]
  DebtorStatusHistory DebtorStatusHistory[]
  Loan                Loan[]

  @@index([createdAt])
  @@index([deletedAt])
  @@index([firstName, lastName])
  @@index([mainEmail])
  @@index([mainPhone])
  @@index([statusId])
}

model DebtorContact {
  id           Int           @id @default(autoincrement())
  debtorId     Int
  typeId       Int
  value        String
  labelId      Int?
  isPrimary    Boolean       @default(false)
  userId       Int?
  notes        String?
  createdAt    DateTime      @default(now()) @db.DateTime(0)
  updatedAt    DateTime      @default(now()) @db.DateTime(0)
  deletedAt    DateTime?     @db.DateTime(0)
  Debtor       Debtor        @relation(fields: [debtorId], references: [id], onDelete: Cascade)
  ContactLabel ContactLabel? @relation(fields: [labelId], references: [id])
  ContactType  ContactType   @relation(fields: [typeId], references: [id])
  User         User?         @relation(fields: [userId], references: [id])

  @@index([debtorId])
  @@index([deletedAt])
  @@index([isPrimary])
  @@index([labelId])
  @@index([typeId])
  @@index([userId], map: "DebtorContact_userId_fkey")
}

model DebtorStatus {
  id                 Int                   @id @default(autoincrement())
  name               String                @unique
  description        String?
  isActive           Boolean               @default(true)
  createdAt          DateTime              @default(now()) @db.DateTime(0)
  updatedAt          DateTime              @default(now()) @db.DateTime(0)
  deletedAt          DateTime?             @db.DateTime(0)
  Debtor             Debtor[]
  newStatusHistories DebtorStatusHistory[] @relation("NewStatusRelation")
  oldStatusHistories DebtorStatusHistory[] @relation("OldStatusRelation")

  @@index([deletedAt])
  @@index([isActive])
  @@index([name])
}

model DebtorStatusHistory {
  id          Int           @id @default(autoincrement())
  debtorId    Int
  oldStatusId Int?
  newStatusId Int
  changedBy   Int
  notes       String?
  createdAt   DateTime      @default(now()) @db.DateTime(0)
  updatedAt   DateTime      @default(now()) @db.DateTime(0)
  deletedAt   DateTime?     @db.DateTime(0)
  User        User          @relation(fields: [changedBy], references: [id])
  Debtor      Debtor        @relation(fields: [debtorId], references: [id], onDelete: Cascade)
  newStatus   DebtorStatus  @relation("NewStatusRelation", fields: [newStatusId], references: [id])
  oldStatus   DebtorStatus? @relation("OldStatusRelation", fields: [oldStatusId], references: [id])

  @@index([changedBy])
  @@index([debtorId])
  @@index([deletedAt])
  @@index([newStatusId], map: "DebtorStatusHistory_newStatusId_fkey")
  @@index([oldStatusId], map: "DebtorStatusHistory_oldStatusId_fkey")
}

model Loan {
  id                Int                 @id @default(autoincrement())
  publicId          String              @unique(map: "publicId_UNIQUE") @default(dbgenerated("(uuid())")) @db.Char(36)
  portfolioId       Int
  debtorId          Int
  caseId            Int?
  originalPrincipal Decimal             @db.Decimal(12, 2)
  purchasedAmount   Decimal             @db.Decimal(12, 2)
  loanStartDate     DateTime            @db.Date
  loanDueDate       DateTime            @db.Date
  statusId          Int
  createdAt         DateTime            @default(now()) @db.DateTime(0)
  updatedAt         DateTime            @default(now()) @db.DateTime(0)
  deletedAt         DateTime?           @db.DateTime(0)
  Comments          Comments[]
  Debtor            Debtor              @relation(fields: [debtorId], references: [id], onDelete: Cascade)
  Portfolio         Portfolio           @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  LoanStatus        LoanStatus          @relation(fields: [statusId], references: [id])
  LoanAttribute     LoanAttribute[]
  LoanStatusHistory LoanStatusHistory[]
  PaymentCommitment PaymentCommitment[]
  Tasks             Tasks[]
  Transaction       Transaction[]

  @@index([createdAt])
  @@index([debtorId])
  @@index([deletedAt])
  @@index([loanDueDate])
  @@index([portfolioId])
  @@index([statusId])
}

model LoanAttribute {
  id          Int        @id @default(autoincrement())
  loanId      Int
  attributeId Int
  value       String?
  createdAt   DateTime   @default(now()) @db.DateTime(0)
  updatedAt   DateTime   @default(now()) @db.DateTime(0)
  deletedAt   DateTime?  @db.DateTime(0)
  Attributes  Attributes @relation(fields: [attributeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Loan        Loan       @relation(fields: [loanId], references: [id])

  @@index([attributeId], map: "fk_LoanAttribute_1_idx")
  @@index([loanId], map: "fk_LoanAttribute_2_idx")
}

model LoanStatus {
  id               Int                 @id @default(autoincrement())
  name             String              @unique
  description      String?
  isActive         Boolean             @default(true)
  createdAt        DateTime            @default(now()) @db.DateTime(0)
  updatedAt        DateTime            @default(now()) @db.DateTime(0)
  deletedAt        DateTime?           @db.DateTime(0)
  Loan             Loan[]
  newStatusHistory LoanStatusHistory[] @relation("NewLoanStatusRelation")
  oldStatusHistory LoanStatusHistory[] @relation("OldLoanStatusRelation")

  @@index([deletedAt])
  @@index([isActive])
  @@index([name])
}

model LoanStatusHistory {
  id                  Int         @id @default(autoincrement())
  loanId              Int
  oldStatusId         Int?
  newStatusId         Int
  changedBy           Int
  notes               String?
  createdAt           DateTime    @default(now()) @db.DateTime(0)
  updatedAt           DateTime    @default(now()) @db.DateTime(0)
  deletedAt           DateTime?   @db.DateTime(0)
  User                User        @relation(fields: [changedBy], references: [id])
  Loan                Loan        @relation(fields: [loanId], references: [id], onDelete: Cascade)
  LoanStatusNewStatus LoanStatus  @relation("NewLoanStatusRelation", fields: [newStatusId], references: [id])
  LoanStatusOldStatus LoanStatus? @relation("OldLoanStatusRelation", fields: [oldStatusId], references: [id])

  @@index([changedBy])
  @@index([deletedAt])
  @@index([loanId])
  @@index([newStatusId], map: "LoanStatusHistory_newStatusId_fkey")
  @@index([oldStatusId], map: "LoanStatusHistory_oldStatusId_fkey")
}

model PaymentCommitment {
  id              Int                    @id @default(autoincrement())
  loanId          Int
  paymentDate     DateTime               @db.Date
  amount          Decimal                @db.Decimal(12, 2)
  comment         String?                @db.Text
  type            PaymentCommitment_type
  userId          Int
  isActive        Int                    @default(1) @db.TinyInt
  createdAt       DateTime               @default(now()) @db.DateTime(0)
  updatedAt       DateTime               @default(now()) @db.DateTime(0)
  deletedAt       DateTime?              @db.DateTime(0)
  Loan            Loan                   @relation(fields: [loanId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_PaymentCommitment_1")
  User            User                   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_PaymentCommitment_2")
  PaymentSchedule PaymentSchedule[]

  @@index([loanId], map: "fk_PaymentCommitment_1_idx")
  @@index([userId], map: "fk_PaymentCommitment_2_idx")
}

model PaymentSchedule {
  id                Int               @id @default(autoincrement())
  commitmentId      Int
  paymentDate       DateTime          @db.Date
  amount            Decimal           @db.Decimal(12, 2)
  createdAt         DateTime          @default(now()) @db.DateTime(0)
  updatedAt         DateTime          @default(now()) @db.DateTime(0)
  deletedAt         DateTime?         @db.DateTime(0)
  PaymentCommitment PaymentCommitment @relation(fields: [commitmentId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_PaymentSchedule_1")

  @@index([commitmentId], map: "fk_PaymentSchedule_1_idx")
}

model Portfolio {
  id            Int       @id @default(autoincrement())
  name          String
  purchasePrice Decimal   @db.Decimal(12, 2)
  purchaseDate  DateTime  @db.Date
  bankName      String
  notes         String?
  createdAt     DateTime  @default(now()) @db.DateTime(0)
  updatedAt     DateTime  @default(now()) @db.DateTime(0)
  deletedAt     DateTime? @db.DateTime(0)
  Loan          Loan[]

  @@index([deletedAt])
  @@index([name])
  @@index([purchaseDate])
}

model Role {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now()) @db.DateTime(0)
  updatedAt DateTime  @default(now()) @db.DateTime(0)
  deletedAt DateTime? @db.DateTime(0)
  User      User[]

  @@index([deletedAt])
  @@index([name])
}

model Transaction {
  id                          Int                         @id @default(autoincrement())
  publicId                    String                      @unique(map: "publicId_UNIQUE") @default(dbgenerated("(uuid())")) @db.Char(36)
  loanId                      Int?
  amount                      Decimal?                    @db.Decimal(12, 2)
  userId                      Int?
  paymentDate                 DateTime?                   @db.Date
  principal                   Decimal?                    @db.Decimal(12, 2)
  interest                    Decimal?                    @db.Decimal(12, 2)
  penalty                     Decimal?                    @db.Decimal(12, 2)
  fees                        Decimal?                    @db.Decimal(12, 2)
  legal                       Decimal?                    @db.Decimal(12, 2)
  transactionChannelAccountId Int?
  currency                    String?                     @default("GEL") @db.VarChar(45)
  createdAt                   DateTime?                   @default(now()) @db.DateTime(0)
  deleted                     Int?                        @default(0) @db.TinyInt
  Loan                        Loan?                       @relation(fields: [loanId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Transactions_1")
  User                        User?                       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Transactions_2")
  TransactionChannelAccounts  TransactionChannelAccounts? @relation(fields: [transactionChannelAccountId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Transactions_3")
  TransactionDeleted          TransactionDeleted[]

  @@index([loanId], map: "fk_Transactions_1_idx")
  @@index([userId], map: "fk_Transactions_2_idx")
  @@index([transactionChannelAccountId], map: "fk_Transactions_3_idx")
}

model TransactionChannelAccounts {
  id                   Int                  @id @default(autoincrement())
  transactionChannelId Int?
  name                 String?              @db.VarChar(100)
  active               Int?                 @default(1) @db.TinyInt
  createdAt            DateTime?            @default(now()) @db.DateTime(0)
  updatedAt            DateTime?            @default(now()) @db.DateTime(0)
  Transaction          Transaction[]
  TransactionChannels  TransactionChannels? @relation(fields: [transactionChannelId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_TransactionChannelAccounts_1")

  @@index([transactionChannelId], map: "fk_TransactionChannelAccounts_1_idx")
}

model TransactionChannels {
  id                         Int                          @id @default(autoincrement())
  name                       String                       @db.VarChar(255)
  active                     Int?                         @default(1) @db.TinyInt
  createdAt                  DateTime?                    @default(now()) @db.DateTime(0)
  updatedAt                  DateTime?                    @default(now()) @db.DateTime(0)
  TransactionChannelAccounts TransactionChannelAccounts[]
}

model TransactionDeleted {
  id            Int          @id @default(autoincrement())
  transactionId Int?
  userId        Int?
  deletedAt     DateTime?    @default(now()) @db.DateTime(0)
  Transaction   Transaction? @relation(fields: [transactionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_TransactionDeleted_1")
  User          User?        @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_TransactionDeleted_2")

  @@index([transactionId], map: "fk_TransactionDeleted_1_idx")
  @@index([userId], map: "fk_TransactionDeleted_2_idx")
}

model User {
  id                         Int                   @id @default(autoincrement())
  publicId                   String                @unique(map: "publicId_UNIQUE") @default(dbgenerated("(uuid())")) @db.Char(36)
  accountId                  String                @unique
  email                      String                @unique
  firstName                  String
  lastName                   String
  hash                       String
  roleId                     Int
  mustChangePassword         Boolean               @default(true)
  createdAt                  DateTime              @default(now()) @db.DateTime(0)
  updatedAt                  DateTime              @default(now()) @db.DateTime(0)
  deletedAt                  DateTime?             @db.DateTime(0)
  Comments                   Comments[]
  DebtorContact              DebtorContact[]
  DebtorStatusHistory        DebtorStatusHistory[]
  LoanStatusHistory          LoanStatusHistory[]
  PaymentCommitment          PaymentCommitment[]
  Tasks_Tasks_fromUserToUser Tasks[]               @relation("Tasks_fromUserToUser")
  Tasks_Tasks_toUserIdToUser Tasks[]               @relation("Tasks_toUserIdToUser")
  Transaction                Transaction[]
  TransactionDeleted         TransactionDeleted[]
  Role                       Role                  @relation(fields: [roleId], references: [id])

  @@index([accountId])
  @@index([deletedAt])
  @@index([email])
  @@index([roleId], map: "User_roleId_fkey")
}

model portfolioSeller {
  id        Int       @id @default(autoincrement())
  name      String?   @db.VarChar(45)
  active    String?   @default("1") @db.VarChar(45)
  createdAt DateTime  @default(now()) @db.DateTime(0)
  updatedAt DateTime  @default(now()) @db.DateTime(0)
  deletedAt DateTime? @db.DateTime(0)
}

model Tasks {
  id                        Int          @id @default(autoincrement())
  loanId                    Int?
  task                      String?      @db.VarChar(255)
  response                  String?      @db.VarChar(255)
  fromUser                  Int
  toUserId                  Int
  deadline                  DateTime     @db.Date
  status                    Tasks_status @default(pending)
  createdAt                 DateTime     @default(now()) @db.DateTime(0)
  updatedAt                 DateTime     @default(now()) @db.DateTime(0)
  deletedAt                 DateTime?    @db.DateTime(0)
  Loan                      Loan?        @relation(fields: [loanId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Tasks_1")
  User_Tasks_fromUserToUser User         @relation("Tasks_fromUserToUser", fields: [fromUser], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Tasks_2")
  User_Tasks_toUserIdToUser User         @relation("Tasks_toUserIdToUser", fields: [toUserId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Tasks_3")

  @@index([loanId], map: "fk_Tasks_1_idx")
  @@index([fromUser], map: "fk_Tasks_2")
  @@index([toUserId], map: "fk_Tasks_3")
}

enum PaymentCommitment_type {
  agreement
  promise
}

enum Tasks_status {
  pending
  complete
}
