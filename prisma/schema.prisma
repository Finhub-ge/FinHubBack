generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id        Int    @id @default(autoincrement())
  name      String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  
  users     User[]
  
  @@index([name])
  @@index([deletedAt])
}

model User {
  id                  Int      @id @default(autoincrement())
  accountId           String   @unique
  email               String   @unique
  firstName           String
  lastName            String
  hash                String
  roleId              Int
  mustChangePassword  Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  deletedAt           DateTime?
  
  role                Role     @relation(fields: [roleId], references: [id])
  debtorContacts      DebtorContact[]
  loanStatusHistories LoanStatusHistory[] @relation("LoanStatusChanges")
  debtorStatusHistories DebtorStatusHistory[] @relation("DebtorStatusChanges")
  
  @@index([email])
  @@index([accountId])
  @@index([deletedAt])
}

model Portfolio {
  id            Int      @id @default(autoincrement())
  name          String
  purchasePrice Decimal  @db.Decimal(12, 2)
  purchaseDate  DateTime
  bankName      String
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime?
  
  loans         Loan[]
  
  @@index([name])
  @@index([purchaseDate])
  @@index([deletedAt])
}

model LoanStatus {
  id          Int @id @default(autoincrement())
  name        String @unique
  description String?
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  
  loans       Loan[]
  loanStatusHistoriesOld  LoanStatusHistory[] @relation("OldLoanStatus")
  loanStatusHistoriesNew  LoanStatusHistory[] @relation("NewLoanStatus")
  
  @@index([name])
  @@index([isActive])
  @@index([deletedAt])
}

model DebtorStatus {
  id          Int @id @default(autoincrement())
  name        String @unique
  description String?
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  
  debtors     Debtor[]
  debtorStatusHistoriesOld  DebtorStatusHistory[] @relation("OldDebtorStatus")
  debtorStatusHistoriesNew  DebtorStatusHistory[] @relation("NewDebtorStatus")
  
  @@index([name])
  @@index([isActive])
  @@index([deletedAt])
}

model Loan {
  id                Int      @id @default(autoincrement())
  portfolioId       Int
  debtorId          Int
  caseId            Int?
  originalPrincipal Decimal  @db.Decimal(12, 2)
  purchasedAmount   Decimal  @db.Decimal(12, 2)
  loanStartDate     DateTime
  loanDueDate       DateTime
  statusId          Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?
  
  portfolio         Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  debtor            Debtor @relation(fields: [debtorId], references: [id], onDelete: Cascade)
  status            LoanStatus @relation(fields: [statusId], references: [id])
  loanStatusHistories LoanStatusHistory[]
  
  @@index([portfolioId])
  @@index([debtorId])
  @@index([statusId])
  @@index([loanDueDate])
  @@index([createdAt])
  @@index([deletedAt])
}

model Debtor {
  id          Int      @id @default(autoincrement())
  firstName   String
  lastName    String
  birthdate   DateTime?
  mainEmail   String?
  mainPhone   String?
  mainAddress String?
  statusId    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  
  loans       Loan[]
  contacts    DebtorContact[]
  status      DebtorStatus @relation(fields: [statusId], references: [id])
  debtorStatusHistories DebtorStatusHistory[]
  
  @@index([firstName, lastName])
  @@index([mainEmail])
  @@index([mainPhone])
  @@index([statusId])
  @@index([createdAt])
  @@index([deletedAt])
}

model ContactType {
  id          Int @id @default(autoincrement())
  name        String @unique
  description String?
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  
  debtorContacts DebtorContact[]
  
  @@index([name])
  @@index([isActive])
  @@index([deletedAt])
}

model ContactLabel {
  id          Int @id @default(autoincrement())
  name        String @unique
  description String?
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  
  debtorContacts DebtorContact[]
  
  @@index([name])
  @@index([isActive])
  @@index([deletedAt])
}

model DebtorContact {
  id        Int     @id @default(autoincrement())
  debtorId  Int
  typeId    Int
  value     String
  labelId   Int?
  isPrimary Boolean @default(false)
  userId    Int?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  
  debtor    Debtor @relation(fields: [debtorId], references: [id], onDelete: Cascade)
  type      ContactType @relation(fields: [typeId], references: [id])
  label     ContactLabel? @relation(fields: [labelId], references: [id])
  user      User? @relation(fields: [userId], references: [id])
  
  @@index([debtorId])
  @@index([typeId])
  @@index([labelId])
  @@index([isPrimary])
  @@index([deletedAt])
}

model LoanStatusHistory {
  id          Int      @id @default(autoincrement())
  loanId      Int
  oldStatusId Int?
  newStatusId Int
  changedBy   Int
  timestamp   DateTime @default(now())
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  
  loan        Loan @relation(fields: [loanId], references: [id], onDelete: Cascade)
  oldStatus   LoanStatus? @relation("OldLoanStatus", fields: [oldStatusId], references: [id])
  newStatus   LoanStatus @relation("NewLoanStatus", fields: [newStatusId], references: [id])
  changedByUser User @relation("LoanStatusChanges", fields: [changedBy], references: [id])
  
  @@index([loanId])
  @@index([timestamp])
  @@index([changedBy])
  @@index([deletedAt])
}

model DebtorStatusHistory {
  id          Int      @id @default(autoincrement())
  debtorId    Int
  oldStatusId Int?
  newStatusId Int
  changedBy   Int
  timestamp   DateTime @default(now())
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  
  debtor      Debtor @relation(fields: [debtorId], references: [id], onDelete: Cascade)
  oldStatus   DebtorStatus? @relation("OldDebtorStatus", fields: [oldStatusId], references: [id])
  newStatus   DebtorStatus @relation("NewDebtorStatus", fields: [newStatusId], references: [id])
  changedByUser User @relation("DebtorStatusChanges", fields: [changedBy], references: [id])
  
  @@index([debtorId])
  @@index([timestamp])
  @@index([changedBy])
  @@index([deletedAt])
}